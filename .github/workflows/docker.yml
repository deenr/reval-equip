name: Docker

on: push

env:
  IMAGE_NAME: reval-build
  CONTAINER_NAME: reval-container

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub registry
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$(echo $GITHUB_SHA | head -c7)
          docker push $IMAGE_ID:$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.DIGITALOCEAN_HOST }}
          USERNAME: ${{ secrets.DIGITALOCEAN_USERNAME }}
          KEY: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME, CONTAINER_NAME, GITHUB_SHA
          script: |
            # Stop running container
            docker stop $(echo $CONTAINER_NAME)

            # Remove old container
            docker rm $(echo $CONTAINER_NAME)

            echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

            # Run a new container from a new image
            docker run -d \
            -v volume-reval:/reval-equip/database \
            -p 80:5000 \
            --name $(echo $CONTAINER_NAME) \
            docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME:$(echo $GITHUB_SHA | head -c7)
